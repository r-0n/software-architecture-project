classDiagram
    %% Django Core Models
    class User {
        +id: int
        +username: str
        +email: str
        +is_authenticated: bool
        +is_superuser: bool
    }

    %% Accounts Module
    namespace accounts {
        class UserProfile {
            +user: OneToOneField
            +phone_number: str
            +address: str
            +role: str
            +is_admin: property
        }
    }

    %% Products Module
    namespace products {
        class Category {
            +id: int
            +name: str
            +description: str
            +created_at: datetime
            +updated_at: datetime
        }

        class Product {
            +id: int
            +name: str
            +description: str
            +sku: str
            +price: Decimal
            +category: ForeignKey
            +stock_quantity: int
            +is_active: bool
            +partner: ForeignKey
            +flash_sale_enabled: bool
            +flash_sale_price: Decimal
            +flash_sale_starts_at: datetime
            +flash_sale_ends_at: datetime
            +is_in_stock: property
            +stock_status: property
            +is_on_flash_sale: property
            +current_price: property
        }

        class ProductForm {
            +clean()
            +save()
        }

        class ProductSearchForm {
            +search: str
            +category: ModelChoiceField
            +stock_status: ChoiceField
        }

        class CategoryForm {
            +name: str
            +description: str
        }
    }

    %% Cart Module
    namespace cart {
        class CartItem {
            +id: int
            +product: ForeignKey
            +quantity: int
            +session_key: str
            +user: ForeignKey
            +created_at: datetime
            +updated_at: datetime
            +total_price: property
        }

        class Cart {
            +session: dict
            +user: User
            +session_key: str
            +cart: dict
            +add()
            +remove()
            +update()
            +clear()
            +save()
            +__iter__()
            +__len__()
            +get_total_price()
            +get_total_items()
        }

        class CheckoutForm {
            +address: str
            +payment_method: ChoiceField
            +card_number: str
            +clean()
        }
    }

    %% Orders Module
    namespace orders {
        class Sale {
            +id: int
            +user: ForeignKey
            +address: str
            +total: Decimal
            +status: str
            +created_at: datetime
        }

        class SaleItem {
            +id: int
            +sale: ForeignKey
            +product: ForeignKey
            +quantity: int
            +unit_price: Decimal
            +subtotal()
        }

        class Payment {
            +id: int
            +sale: OneToOneField
            +method: str
            +reference: str
            +amount: Decimal
            +status: str
            +processed_at: datetime
            +updated_at: datetime
        }
    }

    %% Partner Feeds Module
    namespace partner_feeds {
        class Partner {
            +id: int
            +name: str
            +api_key: UUID
            +is_active: bool
            +feed_format: str
            +feed_url: URL
            +ingestion_schedule: str
            +created_at: datetime
        }

        class FeedIngestion {
            +id: int
            +partner: ForeignKey
            +status: str
            +file_path: str
            +items_processed: int
            +items_failed: int
            +error_message: str
            +started_at: datetime
            +completed_at: datetime
        }

        class FeedAdapter {
            <<abstract>>
            +parse(file_path: str) List~Dict~
        }

        class CSVFeedAdapter {
            +parse(file_path: str) List~Dict~
        }

        class JSONFeedAdapter {
            +parse(file_path: str) List~Dict~
        }

        class FeedAdapterFactory {
            +get_adapter(format_type: str) FeedAdapter
        }

        class ProductFeedValidator {
            +REQUIRED_FIELDS: List
            +validate_item(item: Dict) List~str~
            +transform_item(item: Dict, partner) Dict
        }

        class FeedIngestionService {
            +validator: ProductFeedValidator
            +ingest_feed(partner_id: int, file_path: str) FeedIngestion
            +_process_single_item(item: Dict, partner: Partner)
        }

        class PartnerAuthentication {
            +authenticate(request) Partner
        }
    }

    %% Payments Module
    namespace payments {
        class PaymentGateway {
            +failure_rate: float
            +timeout_rate: float
            +_call_count: int
            +charge(order_id: int, amount: Decimal, timeout_s: float) Dict
            +void(provider_ref: str, timeout_s: float) Dict
            +reset_failure_rates()
        }

        class RetryPolicy {
            +retry_on: List~Type~
            +attempts: int
            +base_delay: float
            +max_delay: float
            +jitter: float
            +should_retry(exception: Exception, attempt: int) bool
            +get_delay(attempt: int) float
        }

        class CircuitBreakerState {
            <<enumeration>>
            CLOSED
            OPEN
            HALF_OPEN
        }

        class CircuitBreaker {
            +name: str
            +threshold: int
            +window_s: int
            +cool_off_s: int
            +cache_key_prefix: str
            +get_state() CircuitBreakerState
            +can_execute() bool
            +on_success()
            +on_failure()
            +get_metrics() Dict
        }
    }

    %% Worker Module
    namespace worker {
        class QueuedJob {
            +id: int
            +job_type: str
            +payload: JSONField
            +status: str
            +created_at: datetime
            +processed_at: datetime
            +error_message: str
        }

        class StockReservation {
            +id: int
            +sale_id: int
            +product_id: int
            +quantity: int
            +reserved_at: datetime
            +expires_at: datetime
            +status: str
        }
    }

    %% Retail Module
    namespace retail {
        class RequestRecordingMiddleware {
            +get_response: callable
            +record_dir: str
            +__call__(request)
            +_save_record(record_entry)
        }

        class FlashSaleTimer {
            +operation_name: str
            +user_id: str
            +product_ids: List~int~
            +start_time: float
            +end_time: float
            +__enter__()
            +__exit__()
        }
    }

    %% Services
    namespace services {
        class ProductServices {
            +is_flash_sale_active(product: Product, now) bool
            +current_effective_price(product: Product, now) Decimal
            +get_price_at_time(product: Product, target_time) Decimal
            +validate_price_consistency(product: Product, add_to_cart_time, checkout_time, expected_price: Decimal) bool
        }

        class CartBusinessRules {
            +validate_product_for_cart(product_active, product_name) bool
            +validate_quantity_limit(quantity, available_stock, product_name) bool
            +validate_cart_update(quantity, available_stock, product_name) bool
            +calculate_cart_total(items) Decimal
            +calculate_item_total(product, quantity) Decimal
        }

        class ThrottleService {
            +allow_checkout(user_or_ip: str, product_id: int) Tuple~bool, str, int~
            +get_throttle_status(user_or_ip: str, product_id: int) dict
            +clear_throttle(user_or_ip: str, product_id: int)
        }

        class PaymentService {
            +charge_with_resilience(order, amount: Decimal, timeout_s: float) Dict
            +void_with_resilience(provider_ref: str, timeout_s: float) Dict
        }

        class LoggingService {
            +log_checkout_requested()
            +log_checkout_throttled()
            +log_checkout_stock_conflict()
            +log_checkout_queued()
            +log_checkout_finalized()
            +log_reservation_created()
            +log_reservation_released()
            +log_price_validation()
            +log_idempotency_check()
            +log_payment_attempt()
            +log_breaker_transition()
            +log_checkout_rollback()
            +log_checkout_commit()
        }
    }

    %% Test Classes
    namespace tests {
        class PaymentProcessingBusinessLogicTest {
            +test_payment_approval_business_rules()
            +test_payment_validation_business_rules()
            +test_payment_decline_business_rules()
        }

        class CartBusinessRulesTest {
            +test_cart_total_calculation()
            +test_price_calculation_business_rules()
        }

        class OrderProcessingRobustnessTest {
            +test_happy_path_success()
            +test_retry_then_success()
            +test_total_failure_rollback()
            +test_circuit_breaker_opens()
            +test_circuit_breaker_recovery()
            +test_timeout_bound()
            +test_comprehensive_resilience_scenarios()
            +test_no_retry_on_non_transient_errors()
            +test_circuit_breaker_short_circuit()
            +test_breaker_time_window_semantics()
            +test_bounded_latency_when_open()
            +test_isolation_across_orders()
            +test_logging_observability()
            +test_csrf_protection_on_flash_checkout()
        }

        class QualityScenarioTestSuite {
            +test_a1_flash_sale_concurrency_control()
            +test_a2_payment_service_resilience()
            +test_s1_csrf_protection_on_flash_checkout()
            +test_s2_rbac_authorization()
            +test_m1_business_rules_isolation()
            +test_m2_business_rules_isolation()
            +test_p1_per_user_sku_throttling()
            +test_p2_async_queue_split()
            +test_i1_validate_transform_upsert_pipeline()
            +test_i2_bulk_upsert_operations()
            +test_t1_mock_objects_patch_decorators()
            +test_t2_deterministic_test_environment()
            +test_u1_specific_error_messages()
            +test_u2_payment_unavailable_ux()
            +test_r1_zero_downtime_deployment()
            +test_r2_feature_flag_safety()
            +test_r3_database_migration_safety()
            +test_r4_rollback_capability()
            +test_r5_graceful_degradation()
        }

        class RecordPlaybackTest {
            +test_request_recording()
            +test_response_comparison()
            +test_pii_redaction()
            +test_deterministic_flash_sale_behavior()
            +test_replay_command()
        }
    }

    %% Relationships - Inheritance
    User <|-- UserProfile : extends
    FeedAdapter <|-- CSVFeedAdapter : implements
    FeedAdapter <|-- JSONFeedAdapter : implements

    %% Relationships - Composition
    UserProfile *-- User : "1:1"
    Product *-- Category : "many:1"
    CartItem *-- Product : "many:1"
    CartItem *-- User : "many:1"
    Sale *-- User : "many:1"
    SaleItem *-- Sale : "many:1"
    SaleItem *-- Product : "many:1"
    Payment *-- Sale : "1:1"
    FeedIngestion *-- Partner : "many:1"
    Product *-- Partner : "many:1"
    QueuedJob *-- User : "many:1"
    StockReservation *-- Product : "many:1"

    %% Relationships - Aggregation
    Cart o-- CartItem : "contains"
    Sale o-- SaleItem : "contains"
    FeedIngestionService o-- ProductFeedValidator : "uses"
    FeedIngestionService o-- FeedAdapterFactory : "uses"
    PaymentService o-- PaymentGateway : "uses"
    PaymentService o-- RetryPolicy : "uses"
    PaymentService o-- CircuitBreaker : "uses"

    %% Relationships - Dependency
    Cart ..> ProductServices : "uses"
    CartBusinessRules ..> ProductServices : "uses"
    Cart ..> CartBusinessRules : "uses"
    Cart ..> ThrottleService : "uses"
    Cart ..> LoggingService : "uses"
    PaymentService ..> LoggingService : "uses"
    CircuitBreaker ..> LoggingService : "uses"
    FeedIngestionService ..> Product : "creates/updates"
    FeedIngestionService ..> Category : "creates"
    RequestRecordingMiddleware ..> LoggingService : "uses"
    FlashSaleTimer ..> LoggingService : "uses"

    %% Test Dependencies
    PaymentProcessingBusinessLogicTest ..> PaymentService : "tests"
    CartBusinessRulesTest ..> CartBusinessRules : "tests"
    OrderProcessingRobustnessTest ..> PaymentService : "tests"
    OrderProcessingRobustnessTest ..> CircuitBreaker : "tests"
    OrderProcessingRobustnessTest ..> RetryPolicy : "tests"
    QualityScenarioTestSuite ..> Cart : "tests"
    QualityScenarioTestSuite ..> Product : "tests"
    QualityScenarioTestSuite ..> Partner : "tests"
    QualityScenarioTestSuite ..> FeedIngestionService : "tests"
    RecordPlaybackTest ..> RequestRecordingMiddleware : "tests"
